function run_experiments_seg()
  rcnn.name = 'rcnn' ;
  rcnn.opts = {...
    'type', 'rcnn', ...
    'model', 'data/models/imagenet-vgg-m.mat', ...
    'layer', 19} ;

%   rcnnvd.name = 'rcnnvd' ;
%   rcnnvd.opts = {...
%     'type', 'rcnn', ...
%     'model', 'data/models/imagenet-vgg-verydeep-19.mat', ...
%     'layer', 41} ;

  dcnn.name = 'dcnnfv' ;
  dcnn.opts = {...
    'type', 'dcnn', ...
    'model', 'data/models/imagenet-vgg-m.mat', ...
    'layer', 13, ...
    'numWords', 64} ;

%   dcnnvd.name = 'dcnnvdfv' ;
%   dcnnvd.opts = {...
%     'type', 'dcnn', ...
%     'model', 'data/models/imagenet-vgg-verydeep-19.mat', ...
%     'layer', 35, ...
%     'numWords', 64} ;

  dsift.name = 'dsift' ;
  dsift.opts = {...
    'type', 'dsift', ...
    'numWords', 256, ...
    'numPcaDimensions', 80} ;

  if 1
    proposalList = {'mcg'}; %, 'speedy', 'crisp', 'scg200'} ;
%     datasetList = {'os'} ;
%     datasetList = {'samplevoc07'} ;
    tranferDatasetList = {'voc07'};%,'msrc'};
    datasetList = {'coco'} ;
%     setupNameList = {'rcnn', 'dcnn', 'rdcnn'} ;
%     encoderList = {{rcnn}, {dcnn}, {rcnn dcnn}} ;
    setupNameList = {'dcnn'};
    encoderList = {{dcnn}};
    if 0
      setupNameList =  horzcat(setupNameList, {'rcnnvd', 'dcnnvd', 'rdcnnvd'}) ;
      encoderList = horzcat(encoderList, {{rcnnvd}, {dcnnvd}, {rcnnvd dcnnvd}}) ;
    end
  else
    % full scg experiments, skip RCNN due to excruciating slowness
    proposalList = {'scg'} ;
    datasetList = {'os'} ;
    setupNameList = {'dcnn', 'dcnnvd'} ;
    encoderList = {{dcnn}, {dcnnvd}} ;
  end

  numSplits = [1, 1] ;
  for qq = 1 : numel(proposalList)
    for ii = 1 : numel(datasetList)
      for jj = 1 : numSplits(ii)
        os_seg_test_orig(...
          'dataset', datasetList{ii}, ...
          'seed', jj, ...
          'encoders', encoderList, ...
          'prefix', 'exp01', ...
          'suffix', setupNameList , ...
          'segProposalType', proposalList{qq}, ...
          'useGpu', false) ;
%       'transferDataset', tranferDatasetList{ii}, ...
      end
    end
  end
end